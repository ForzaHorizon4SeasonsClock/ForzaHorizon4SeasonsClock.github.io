{"version":3,"sources":["components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["getSeason","num","arguments","length","undefined","week","moment","seasons","Error","tz","setDefault","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","season","diff","hasReachedZero","_this2","timer","setInterval","tick","clearInterval","friday","day","hours","minutes","seconds","current","hrz","d","timeInSeconds","totalSeconds","days","Math","floor","daysString","hoursString","convertTime","round","s","setState","react_default","a","createElement","className","React","Component","App","src_components_Clock","packageJson","version","href","data-icon","data-size","aria-label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d989da5.chunk.js","sourcesContent":["import React from 'react'\r\nimport moment from 'moment-timezone'\r\nimport './Clock.css'\r\n\r\nmoment.tz.setDefault('Australia/Lindeman')\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { season: ['', ''], diff: 0, hasReachedZero: false }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => this.tick(), 10)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  tick() {\r\n    var friday = moment()\r\n      .day('Friday')\r\n      .hours(0)\r\n      .minutes(30)\r\n      .seconds(0)\r\n    var current = moment()\r\n    var diff = friday - current\r\n    var hrz = false\r\n    if (diff <= 0) {\r\n      diff = friday.week(friday.week() + 1) - current\r\n      hrz = true\r\n    }\r\n    var d = convertTime(Math.round(diff / 1000))\r\n    var s = this.state.hasReachedZero ? getSeason(1) : getSeason()\r\n    this.setState({\r\n      diff: d,\r\n      season: s,\r\n      hasReachedZero: hrz\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={'clock-container clock__' + this.state.season[0]}>\r\n        <div className=\"clock\">\r\n          <h5>Current Season</h5>\r\n          <h1>{this.state.season[0]}</h1>\r\n          <h2>{this.state.season[1] + ' starts in:'}</h2>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <span className=\"number\">{this.state.diff[0]}</span>\r\n              <span className=\"text\">days</span>\r\n            </div>\r\n            <div className=\"col\">\r\n              <span className=\"number\">{this.state.diff[1]}</span>\r\n              <span className=\"text\">hours</span>\r\n            </div>\r\n            <div className=\"col\">\r\n              <span className=\"number\">{this.state.diff[2]}</span>\r\n              <span className=\"text\">minutes</span>\r\n            </div>\r\n            <div className=\"col\">\r\n              <span className=\"number\">{this.state.diff[3]}</span>\r\n              <span className=\"text\">seconds</span>\r\n            </div>\r\n          </div>\r\n          <p>Every Friday at 12:30 A.M. (AEDT), Forza Horizon 4's season changes.</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction convertTime(timeInSeconds) {\r\n  var totalSeconds = timeInSeconds\r\n\r\n  var days = Math.floor(totalSeconds / (3600 * 24))\r\n  totalSeconds -= days * 3600 * 24\r\n  var daysString = days > 0 ? (days > 9 ? days : '0' + days) : '00'\r\n\r\n  var hours = Math.floor(totalSeconds / 3600)\r\n  totalSeconds -= hours * 3600\r\n  var hoursString = hours > 0 ? (hours > 9 ? hours : '0' + hours) : '00'\r\n\r\n  var minutes = Math.floor(totalSeconds / 60)\r\n  totalSeconds -= minutes * 60\r\n  var minutesString =\r\n    minutes > 0 ? (minutes > 9 ? minutes : '0' + minutes) : '00'\r\n\r\n  var secondsString =\r\n    totalSeconds > 0\r\n      ? totalSeconds > 9\r\n        ? totalSeconds\r\n        : '0' + totalSeconds\r\n      : '00'\r\n\r\n  return [daysString, hoursString, minutesString, secondsString]\r\n}\r\n\r\nfunction getSeason(num = 0) {\r\n  var week = (moment().week() % 4) + num\r\n  var seasons = ['Winter', 'Spring', 'Summer', 'Autumn']\r\n  switch (week) {\r\n    case 0:\r\n      return [seasons[2], seasons[3]]\r\n    case 1:\r\n      return [seasons[3], seasons[0]]\r\n    case 2:\r\n      return [seasons[0], seasons[1]]\r\n    case 3:\r\n      return [seasons[1], seasons[2]]\r\n    default:\r\n      throw new Error('getSeason error: Invalid number', week)\r\n  }\r\n}\r\n\r\nexport default Clock\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Clock from './components/Clock.js'\n//import ReactGA from 'react-ga'\n\nimport packageJson from '../package.json'\n\nclass App extends Component {\n  componentDidMount () {\n    //ReactGA.initialize('UA-000000-01');\n    //ReactGA.pageview(window.location.pathname + window.location.search);\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header>\n          <span>Forza Horizon 4 Seasons Clock</span>\n        </header>\n        <main>\n        <Clock />\n        </main>\n        <footer>\n          <span>Version: {packageJson.version}</span>\n          <div>\n            <span>Report an issue.</span>\n            <a className=\"github-button\" \n              href=\"https://github.com/forzahorizon4seasonsclock/forzahorizon4seasonsclock.github.io/issues\"\n              data-icon=\"octicon-issue-opened\"\n              data-size=\"large\"\n              aria-label=\"Issue forzahorizon4seasonsclock/forzahorizon4seasonsclock.github.io on GitHub\">Issue</a>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}